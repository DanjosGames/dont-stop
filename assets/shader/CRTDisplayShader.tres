[gd_resource type="CanvasItemShader" format=1]

[resource]

_code = { "fragment":"uniform float screen_width = 1280;\nuniform float screen_height = 720;\n// Curvature\nuniform float BarrelPower = 1.1;\n// Color bleeding\nuniform float color_bleeding = 1.2;\nuniform float bleeding_range_x = 3;\nuniform float bleeding_range_y = 3;\n// Scanline\nuniform float lines_distance = 3.0;\nuniform float scan_size = 1.0;\nuniform float scanline_alpha = 0.9;\nuniform float lines_velocity = -.0;\n\n// Scanline function\nvec4 get_color_scanline(vec2 uv, vec4 c){\n\tfloat line_row = floor((uv.y * screen_height/scan_size) + mod(TIME*lines_velocity, lines_distance));\n\n\tfloat n = 1.0 - ceil((mod(line_row,lines_distance)/lines_distance));\n\n\tc = c - n*c*(1 - scanline_alpha);\n\tc.a = 1;\n\treturn c;\n}\n\n// Color bleeding function\n\nvec4 get_color_bleeding(vec2 uv){\n\tfloat pixel_size_x = 1/screen_width*bleeding_range_x;\n\tfloat pixel_size_y = 1/screen_height*bleeding_range_y;\n\tvec4 color_left = vec4(texscreen(uv - vec2(pixel_size_x, pixel_size_y)),1);\n\tvec4 current_color = vec4(texscreen(uv),1);\n\t\n\tcurrent_color = current_color*vec4(color_bleeding,0.5,1-color_bleeding,1);\n\tcolor_left = color_left*vec4(1-color_bleeding,0.5,color_bleeding,1);\n\t\n\treturn (current_color + color_left);\n}\n\n\n// Curvature function\nvec2 distort(vec2 p) {\n\n\tfloat angle = p.y / p.x;\n\tfloat theta = atan2(p.y,p.x);\n\tfloat radius = length(p);\n\tradius = pow(radius, BarrelPower);\n\t\n\tp.x = radius * cos(theta);\n\tp.y = radius * sin(theta);\n\t\n\treturn 0.5 * (p + vec2(1.0,1.0));\n}\n\n// Setup curvature, than Color bleeding and finally scanline\nvec2 xy = 2* SCREEN_UV;\nxy.x = xy.x-1;\nxy.y = xy.y-1;\n\nfloat d = length(xy);\nif(d < 1.5){\n\txy = distort(xy);\n}\nelse{\n\txy = SCREEN_UV;\n}\n\nvec4 c = get_color_bleeding(xy);\nCOLOR = get_color_scanline(xy,c);", "fragment_ofs":0, "light":"", "light_ofs":0, "vertex":"", "vertex_ofs":0 }

